-- Update ClassStudents table to work with new Groupe table
-- This assumes ClassStudents table has a class_id field that should reference Groupe.id

-- First, let's check if we need to update the ClassStudents table structure
-- If ClassStudents.class_id currently references Classes.id, we need to update it

-- Option 1: If ClassStudents table doesn't exist yet, create it with proper references
CREATE TABLE IF NOT EXISTS public."ClassStudents" (
  class_id bigint NOT NULL,
  student_id uuid NOT NULL,
  CONSTRAINT ClassStudents_pkey PRIMARY KEY (class_id, student_id),
  CONSTRAINT fk_class FOREIGN KEY (class_id) REFERENCES public."Groupe"(id) ON DELETE CASCADE,
  CONSTRAINT fk_student FOREIGN KEY (student_id) REFERENCES public.student(id) ON DELETE CASCADE
) TABLESPACE pg_default;

-- Option 2: If ClassStudents table exists but references old Classes table, update it
-- (Uncomment these lines if needed)
-- ALTER TABLE public."ClassStudents" DROP CONSTRAINT IF EXISTS fk_class;
-- ALTER TABLE public."ClassStudents" ADD CONSTRAINT fk_class FOREIGN KEY (class_id) REFERENCES public."Groupe"(id) ON DELETE CASCADE;

-- Create Subjects table if it doesn't exist (matches your existing table)
CREATE TABLE IF NOT EXISTS public."Subjects" (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  subjects varchar(100) NOT NULL UNIQUE,
  created_at timestamptz DEFAULT now()
) TABLESPACE pg_default;

-- Insert some sample subjects
INSERT INTO public."Subjects" (subjects) VALUES
  ('Mathematics'),
  ('Physics'),
  ('Chemistry'),
  ('Biology'),
  ('Computer Science'),
  ('English'),
  ('French'),
  ('History'),
  ('Geography'),
  ('Informatique'),
  ('Science'),
  ('Tech'),
  ('Math'),
  ('Eco'),
  ('Lettre')
ON CONFLICT (subjects) DO NOTHING;

-- Create Classe table if it doesn't exist
CREATE TABLE IF NOT EXISTS public."Classe" (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(50) NOT NULL,
  level_id bigint NOT NULL REFERENCES public."Level"(id) ON DELETE RESTRICT,
  description text,
  created_at timestamptz DEFAULT now(),
  UNIQUE(name, level_id)
) TABLESPACE pg_default;

-- Insert sample classes for each level
INSERT INTO public."Classe" (name, level_id) VALUES
  ('A', 1), ('B', 1), ('C', 1),  -- 1ère classes
  ('A', 2), ('B', 2), ('C', 2),  -- 2ème classes  
  ('A', 3), ('B', 3), ('C', 3),  -- 3ème classes
  ('A', 4), ('B', 4), ('C', 4)   -- Bac classes
ON CONFLICT (name, level_id) DO NOTHING;

-- Create Branch table if it doesn't exist
CREATE TABLE IF NOT EXISTS public."Branch" (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(50) NOT NULL UNIQUE,
  description text,
  created_at timestamptz DEFAULT now()
) TABLESPACE pg_default;

-- Insert sample branches
INSERT INTO public."Branch" (name, description) VALUES
  ('informatique', 'Computer Science and Programming'),
  ('sciences', 'Natural Sciences'),
  ('tech', 'Technology and Engineering'),
  ('math', 'Mathematics'),
  ('eco', 'Economics and Business'),
  ('lettre', 'Literature and Languages')
ON CONFLICT (name) DO NOTHING;

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_groupe_teacher_id ON public."Groupe"(teacher_id);
CREATE INDEX IF NOT EXISTS idx_groupe_subject_id ON public."Groupe"(subject_id);
CREATE INDEX IF NOT EXISTS idx_groupe_level_id ON public."Groupe"(level_id);
CREATE INDEX IF NOT EXISTS idx_groupe_classe_id ON public."Groupe"(classe_id);
CREATE INDEX IF NOT EXISTS idx_groupe_branch_id ON public."Groupe"(branch_id);
CREATE INDEX IF NOT EXISTS idx_classstudents_class_id ON public."ClassStudents"(class_id);
CREATE INDEX IF NOT EXISTS idx_classstudents_student_id ON public."ClassStudents"(student_id);
